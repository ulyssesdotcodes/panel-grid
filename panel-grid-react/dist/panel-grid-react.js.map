{"version":3,"sources":["../src/panel-grid-react.tsx","../src/utilities.ts"],"names":["templateSizes"],"mappings":"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","sourcesContent":["import { useLocalStorage } from \"usehooks-ts\";\nimport React, {\n  CSSProperties,\n  FunctionComponent,\n  PropsWithChildren,\n  useLayoutEffect,\n  useRef,\n  useState,\n  PointerEvent,\n  createContext,\n  useContext,\n  ReactNode,\n} from \"react\";\nimport { useResizeDetector } from \"react-resize-detector\";\nimport {\n  gridTemplateSizeFromString,\n  gridTemplateSizeToString,\n  Resize,\n  ResizeBar,\n  resizeBarPosition,\n  PanelGridState,\n  updateTemplateSizes,\n  transpose,\n  GridTemplateSize,\n  GridTemplates,\n  minimizeTemplateSizes,\n  eq,\n  cloneDeep,\n} from \"./utilities\";\n\nconst ResizeBarElement: FunctionComponent<{\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  onPointerDown: (e: PointerEvent<SVGSVGElement>) => void;\n  onPointerMove: (e: PointerEvent<SVGSVGElement>) => void;\n  onPointerUp: (e: PointerEvent<SVGSVGElement>) => void;\n  resizeBar: ResizeBar;\n}> = ({\n  resizeBar,\n  x,\n  y,\n  width,\n  height,\n  onPointerDown,\n  onPointerMove,\n  onPointerUp,\n}) => (\n  <svg\n    data-testid={`resizebar-${resizeBar.areaName}-${resizeBar.position}`}\n    onPointerDown={onPointerDown}\n    onPointerMove={onPointerMove}\n    onPointerUp={onPointerUp}\n    style={{\n      position: \"absolute\",\n      top: y,\n      left: x,\n      width,\n      height,\n      cursor:\n        resizeBar.position === \"top\" || resizeBar.position === \"bottom\"\n          ? \"row-resize\"\n          : \"col-resize\",\n    }}\n  ></svg>\n);\n\nconst calculateAreaRects =\n  (gridRef: HTMLDivElement | null) => (state: PanelGridState) => {\n    if (!gridRef) return state;\n    const newState = cloneDeep(state);\n    const children = gridRef.children;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i] as HTMLDivElement;\n      const style = getComputedStyle(child);\n      newState.areaRects[style.gridArea] = child.getBoundingClientRect();\n    }\n    return newState;\n  };\n\ntype PanelGridContextState = {\n  minimize: (areaName: string, size: GridTemplateSize) => void;\n  findResizeBar: (areaName: string) => ResizeBar | undefined;\n  minimizedAreas: Array<string>;\n};\n\nconst PanelGridContext = createContext<PanelGridContextState>({\n  minimize: (areaName: string, size: GridTemplateSize) => {},\n  findResizeBar: (areaName: string) => undefined,\n  minimizedAreas: [],\n});\n\nconst styles = {\n  title: {\n    opacity: 1,\n    transition: \"opacity .1s ease-out\",\n    transitionDelay: \".25s\",\n  },\n  titleCollapsed: {\n    opacity: 0,\n    transitionDelay: \"0s\",\n  },\n};\n\nexport const Panel: FunctionComponent<\n  PropsWithChildren<{\n    gridArea: string;\n    title?: ReactNode;\n    collapsedSize: string;\n    collapsedIcon?: ReactNode;\n    expandedIcon?: ReactNode;\n    resizeBorderStyle?: string;\n    style?: CSSProperties;\n    titleStyle?: CSSProperties;\n  }>\n> = ({\n  children,\n  title,\n  gridArea,\n  collapsedSize,\n  collapsedIcon,\n  expandedIcon,\n  resizeBorderStyle = \"1px solid rgba(0, 0, 0, 0.12)\",\n  style,\n  titleStyle,\n}) => {\n  const panelGridContext = useContext(PanelGridContext);\n  const [wrapperRect, setWrapperRect] = useState<DOMRect>();\n  const [titleRect, setTitleRect] = useState<DOMRect>();\n  const [iconRect, setIconRect] = useState<DOMRect>();\n\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const titleRef = useRef<HTMLDivElement>(null);\n  const iconRef = useRef<HTMLButtonElement>(null);\n\n  const isMinimized = panelGridContext.minimizedAreas.includes(gridArea);\n  const resizeBar = panelGridContext.findResizeBar(gridArea);\n\n  useLayoutEffect(() => {\n    if (wrapperRef.current) {\n      setWrapperRect(wrapperRef.current.getBoundingClientRect());\n    }\n    if (titleRef.current) {\n      setTitleRect(titleRef.current.getBoundingClientRect());\n    }\n    if (iconRef.current) {\n      setIconRect(iconRef.current.getBoundingClientRect());\n    }\n  }, []);\n\n  return resizeBar ? (\n    <div\n      ref={wrapperRef}\n      style={{\n        height: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        padding: \"0.8em\",\n        [`border-${resizeBar.position}`]: resizeBorderStyle,\n        gap: \"0.4em\",\n        gridArea,\n        ...style,\n      }}\n    >\n      <div\n        ref={titleRef}\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          flexBasis: \"2em\",\n          gap: \"0.4em\",\n          ...titleStyle,\n        }}\n      >\n        {collapsedSize && resizeBar.position === \"right\" && (\n          <div\n            ref={iconRef}\n            style={{ display: \"flex\", flex: \"0 0 auto\" }}\n            onClick={() =>\n              wrapperRect &&\n              titleRect &&\n              iconRect &&\n              panelGridContext.minimize(\n                gridArea,\n                gridTemplateSizeFromString(collapsedSize),\n              )\n            }\n          >\n            {isMinimized ? collapsedIcon : expandedIcon}\n          </div>\n        )}\n        {(!isMinimized ||\n          resizeBar?.position === \"top\" ||\n          resizeBar?.position === \"bottom\") && (\n          <div\n            style={{\n              flexGrow: 1,\n              ...(isMinimized && styles.titleCollapsed),\n              ...styles.title,\n            }}\n          >\n            {title}\n          </div>\n        )}\n        {collapsedSize && resizeBar.position !== \"right\" && (\n          <div\n            ref={iconRef}\n            style={{ display: \"flex\", flex: \"0 0 auto\" }}\n            onClick={() =>\n              wrapperRect &&\n              titleRect &&\n              iconRect &&\n              panelGridContext.minimize(\n                gridArea,\n                gridTemplateSizeFromString(collapsedSize),\n              )\n            }\n          >\n            {isMinimized ? collapsedIcon : expandedIcon}\n          </div>\n        )}\n      </div>\n      <div\n        style={{\n          flexBasis: \"0px\",\n          flexGrow: 1,\n          flexShrink: 1,\n          display: isMinimized ? \"none\" : \"block\",\n          overflowY: \"clip\",\n        }}\n      >\n        {children}\n      </div>\n    </div>\n  ) : (\n    <>{children}</>\n  );\n};\n\nexport const PanelGrid: FunctionComponent<\n  PropsWithChildren<{\n    gridTemplateAreas: Exclude<CSSProperties[\"gridTemplateAreas\"], undefined>;\n    initialTemplates: {\n      rows: Array<string>;\n      columns: Array<string>;\n    };\n    resizeBars: Array<ResizeBar>;\n    borderStyle?: string;\n    style?: CSSProperties;\n  }>\n> = ({ gridTemplateAreas, initialTemplates, resizeBars, children, style }) => {\n  const areaNames = [...gridTemplateAreas.matchAll(/\"([^\"]+)\"/g)]\n    .map((m) => m[1])\n    .map((row) => row.split(\" \"));\n\n  const gridRef = useRef<HTMLDivElement>(null);\n\n  const [templateSizes, setTemplateSizes] = useLocalStorage<GridTemplates>(\n    \"shot-edit-grid-template-sizes\",\n    {\n      minimizedAreas: [],\n      gridTemplateRows: initialTemplates.rows.map(gridTemplateSizeFromString),\n      gridTemplateColumns: initialTemplates.columns.map(\n        gridTemplateSizeFromString,\n      ),\n    },\n  );\n\n  const [state, setState] = useState<PanelGridState>({\n    areaNames,\n    areaRects: {},\n  });\n  const [resize, setResize] = useState<Resize | false>(false);\n  const [isAnimating, setIsAnimating] = useState<boolean>(false);\n\n  useResizeDetector({\n    targetRef: gridRef,\n    onResize: () => setState(calculateAreaRects(gridRef.current)),\n  });\n\n  const resizedTemplateSizes =\n    resize === false\n      ? templateSizes\n      : updateTemplateSizes(state, resize, templateSizes);\n\n  const minimizedTemplateSizes = minimizeTemplateSizes(\n    minimizeTemplateSizes(resizedTemplateSizes, resizeBars, areaNames, \"row\"),\n    resizeBars,\n    transpose(areaNames),\n    \"column\",\n  );\n\n  return (\n    <div style={{ height: \"100%\", width: \"100%\" }}>\n      <div\n        ref={gridRef}\n        className=\"panel-grid\"\n        style={{\n          display: \"grid\",\n          gridTemplateAreas,\n          gridTemplateRows: minimizedTemplateSizes.gridTemplateRows\n            .map(gridTemplateSizeToString)\n            .join(\" \"),\n          gridTemplateColumns: minimizedTemplateSizes.gridTemplateColumns\n            .map(gridTemplateSizeToString)\n            .join(\" \"),\n          width: \"100%\",\n          height: \"100%\",\n          transition: isAnimating\n            ? \"grid-template-rows .25s ease-in-out, grid-template-columns .25s ease-in-out\"\n            : undefined,\n          ...style,\n        }}\n      >\n        <PanelGridContext.Provider\n          value={{\n            minimize: (area: string, size: GridTemplateSize) => {\n              setIsAnimating(true);\n              setTimeout(() => {\n                setIsAnimating(false);\n                setState(calculateAreaRects(gridRef.current));\n              }, 250);\n              setTemplateSizes((templateSizes) => ({\n                ...templateSizes,\n                minimizedAreas: templateSizes.minimizedAreas.find(\n                  (ma) => ma.area === area,\n                )\n                  ? templateSizes.minimizedAreas.filter(\n                      (ma) => ma.area !== area,\n                    )\n                  : templateSizes.minimizedAreas.concat({ area, size }),\n              }));\n            },\n            findResizeBar: (areaName: string) =>\n              resizeBars.find((rb) => rb.areaName === areaName),\n            minimizedAreas: templateSizes.minimizedAreas.map((ma) => ma.area),\n          }}\n        >\n          {children}\n        </PanelGridContext.Provider>\n      </div>\n      <div>\n        {resizeBars\n          .filter(\n            (x) =>\n              state.areaRects[x.areaName] &&\n              !templateSizes.minimizedAreas.find(\n                (ma) => ma.area === x.areaName,\n              ),\n          )\n          .map((resizeBar) => resizeBarPosition(state, resizeBar))\n          .map((resizeBarPos) =>\n            resize && eq(resizeBarPos.resizeBar, resize.resizeBar)\n              ? {\n                  ...resizeBarPos,\n                  x:\n                    resize.resizeBar.position === \"left\" ||\n                    resize.resizeBar.position === \"right\"\n                      ? resizeBarPos.x + (resize.end.x - resize.start.x)\n                      : resizeBarPos.x,\n                  y:\n                    resize.resizeBar.position === \"top\" ||\n                    resize.resizeBar.position === \"bottom\"\n                      ? resizeBarPos.y + (resize.end.y - resize.start.y)\n                      : resizeBarPos.y,\n                }\n              : resizeBarPos,\n          )\n          .map((props) => (\n            <ResizeBarElement\n              {...props}\n              key={`resizebar-${props.resizeBar.areaName}-${props.resizeBar.position}`}\n              onPointerDown={(e) => {\n                if (!resize) {\n                  e.preventDefault();\n                  (e.target as SVGElement)?.setPointerCapture?.(e.pointerId);\n                  setState(calculateAreaRects(gridRef.current));\n                  setResize({\n                    resizeBar: props.resizeBar,\n                    start: {\n                      x: e.clientX,\n                      y: e.clientY,\n                    },\n                    end: {\n                      x: e.clientX,\n                      y: e.clientY,\n                    },\n                  });\n                }\n              }}\n              onPointerMove={(e) => {\n                if (resize && resize.resizeBar) {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  setResize({\n                    ...resize,\n                    end: {\n                      x: e.clientX,\n                      y: e.clientY,\n                    },\n                  });\n                }\n              }}\n              onPointerUp={(e) => {\n                if (resize) {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  setState(calculateAreaRects(gridRef.current));\n                  setTemplateSizes(resizedTemplateSizes);\n                  setResize(false);\n                }\n              }}\n            />\n          ))}\n      </div>\n    </div>\n  );\n};\n","type Span = {\n  start: number;\n  end: number;\n};\n\ntype AdjacentAreaPair = {\n  to: string;\n  from: string;\n  row: Span;\n  column: Span;\n};\n\ntype Rect = { x: number; y: number; width: number; height: number };\ntype AreaRects = Record<string, Rect>;\n\ntype GridTemplateSizeAuto = {\n  _kind: \"auto\";\n};\ntype GridTemplateSizePixel = {\n  _kind: \"px\";\n  value: number;\n};\ntype GridTemplateSizeFr = {\n  _kind: \"fr\";\n  value: number;\n};\ntype GridTemplateSizeEm = {\n  _kind: \"em\";\n  value: number;\n};\n\nexport type GridTemplateSize =\n  | GridTemplateSizeAuto\n  | GridTemplateSizePixel\n  | GridTemplateSizeFr\n  | GridTemplateSizeEm\n  | string;\n\nexport const gridTemplateSizeToString = (gridTemplateSize: GridTemplateSize) =>\n  typeof gridTemplateSize === \"string\"\n    ? gridTemplateSize\n    : gridTemplateSize._kind === \"auto\"\n    ? \"auto\"\n    : gridTemplateSize._kind === \"fr\"\n    ? `${gridTemplateSize.value}fr`\n    : gridTemplateSize._kind === \"em\"\n    ? `${gridTemplateSize.value}em`\n    : `${gridTemplateSize.value}px`;\n\nexport const gridTemplateSizeFromString = (\n  gridTemplateSize: string,\n): GridTemplateSize =>\n  gridTemplateSize === \"auto\"\n    ? { _kind: \"auto\" }\n    : gridTemplateSize.endsWith(\"fr\")\n    ? {\n        _kind: \"fr\",\n        value: Number(\n          gridTemplateSize.substring(0, gridTemplateSize.length - 2),\n        ),\n      }\n    : gridTemplateSize.endsWith(\"px\")\n    ? {\n        _kind: \"px\",\n        value: Number(\n          gridTemplateSize.substring(0, gridTemplateSize.length - 2),\n        ),\n      }\n    : gridTemplateSize.endsWith(\"em\")\n    ? {\n        _kind: \"em\",\n        value: Number(\n          gridTemplateSize.substring(0, gridTemplateSize.length - 2),\n        ),\n      }\n    : gridTemplateSize;\n\ntype BorderPosition = \"top\" | \"right\" | \"bottom\" | \"left\";\n\nexport type ResizeBar = {\n  areaName: string;\n  position: BorderPosition;\n  minSize?: number;\n  maxSize?: number;\n};\n\nexport type PanelGridState = {\n  areaNames: string[][];\n  areaRects: AreaRects;\n};\n\nexport type GridTemplates = {\n  gridTemplateRows: GridTemplateSize[];\n  gridTemplateColumns: GridTemplateSize[];\n  minimizedAreas: Array<{ area: string; size: GridTemplateSize }>;\n};\n\nexport type Vector2 = {\n  x: number;\n  y: number;\n};\n\nexport type Resize = {\n  resizeBar: ResizeBar;\n  start: Vector2;\n  end: Vector2;\n};\n\nconst DEFAULT_RESIZE_BAR_SIZE = 16;\n\nexport const resizeBarPosition = (\n  panelGridState: PanelGridState,\n  resizeBar: ResizeBar,\n  width = DEFAULT_RESIZE_BAR_SIZE,\n): Rect & { resizeBar: ResizeBar } => ({\n  resizeBar,\n  x:\n    panelGridState.areaRects[resizeBar.areaName].x +\n    (resizeBar.position === \"right\"\n      ? panelGridState.areaRects[resizeBar.areaName].width\n      : 0) +\n    (resizeBar.position === \"left\" || resizeBar.position === \"right\"\n      ? -width * 0.5\n      : 0),\n  y:\n    panelGridState.areaRects[resizeBar.areaName].y +\n    (resizeBar.position === \"bottom\"\n      ? panelGridState.areaRects[resizeBar.areaName].height\n      : 0) +\n    (resizeBar.position === \"top\" || resizeBar.position === \"bottom\"\n      ? -width * 0.5\n      : 0),\n  width:\n    resizeBar.position === \"left\" || resizeBar.position === \"right\"\n      ? width\n      : panelGridState.areaRects[resizeBar.areaName].width,\n  height:\n    resizeBar.position === \"top\" || resizeBar.position === \"bottom\"\n      ? width\n      : panelGridState.areaRects[resizeBar.areaName].height,\n});\n\ntype TemplateIndex =\n  | { _kind: \"row\"; value: number }\n  | { _kind: \"column\"; value: number };\n\n// util functions\nconst toReversed = <T>(arr: T[]): T[] => [...arr].reverse();\nconst arraywith = <T>(arr: T[], index: number, value: T): T[] => {\n  const arrp = [...arr];\n  arrp[index] = value;\n  return arrp;\n};\nexport const transpose = <T>(arr: T[][]): T[][] =>\n  arr[0].map((_, i) => arr.map((row) => row[i]));\nexport const clamp = (value: number, min: number, max: number) =>\n  Math.min(Math.max(value, min), max);\n// TODO: hacky, rewrite\nexport const cloneDeep = (obj: any) => JSON.parse(JSON.stringify(obj));\nexport const eq = <T>(a: T, b: T): boolean =>\n  JSON.stringify(a) === JSON.stringify(b);\n\nexport const findTemplateIndex = (\n  areaNames: string[][],\n  resizeBar: ResizeBar,\n): TemplateIndex | undefined =>\n  resizeBar.position === \"top\"\n    ? areaNames.reduce<TemplateIndex | undefined>(\n        (acc, row, idx) =>\n          acc ?? row.includes(resizeBar.areaName)\n            ? { _kind: \"row\", value: idx }\n            : undefined,\n        undefined,\n      )\n    : resizeBar.position === \"bottom\"\n    ? toReversed(areaNames).reduce<TemplateIndex | undefined>(\n        (acc, row, idx) =>\n          acc ??\n          (row.includes(resizeBar.areaName)\n            ? { _kind: \"row\", value: areaNames.length - 1 - idx }\n            : undefined),\n        undefined,\n      )\n    : resizeBar.position === \"left\"\n    ? areaNames.reduce<TemplateIndex | undefined>(\n        (acc, row) =>\n          acc ??\n          (row.indexOf(resizeBar.areaName) !== -1\n            ? { _kind: \"column\", value: row.indexOf(resizeBar.areaName) }\n            : undefined),\n        undefined,\n      )\n    : resizeBar.position === \"right\"\n    ? areaNames.reduce<TemplateIndex | undefined>(\n        (acc, row) =>\n          acc ??\n          (row.indexOf(resizeBar.areaName) !== -1\n            ? {\n                _kind: \"column\",\n                value:\n                  row.length - 1 - toReversed(row).indexOf(resizeBar.areaName),\n              }\n            : undefined),\n        undefined,\n      )\n    : undefined;\n\nexport const CAPITALIZED_TEMPLATE_INDEX = {\n  row: \"Row\",\n  column: \"Column\",\n};\n\nexport const updateTemplateSizes = (\n  state: PanelGridState,\n  resize: Resize,\n  gridTemplates: GridTemplates,\n): GridTemplates => {\n  const templateIndex = findTemplateIndex(state.areaNames, resize.resizeBar);\n  if (!templateIndex) return gridTemplates;\n\n  const capitalizedTemplateIndex =\n    CAPITALIZED_TEMPLATE_INDEX[templateIndex._kind];\n\n  return {\n    ...gridTemplates,\n    [`gridTemplate${capitalizedTemplateIndex}s`]: arraywith(\n      gridTemplates[\n        `gridTemplate${capitalizedTemplateIndex}s` as Extract<\n          keyof GridTemplates,\n          \"gridTemplateRows\" | \"gridTemplateColumns\"\n        >\n      ],\n      templateIndex.value,\n      {\n        _kind: \"px\",\n        value: clamp(\n          state.areaRects[resize.resizeBar.areaName][\n            templateIndex._kind === \"row\" ? \"height\" : \"width\"\n          ] +\n            (templateIndex._kind === \"row\"\n              ? (resize.end.y - resize.start.y) *\n                (resize.resizeBar.position === \"top\" ? -1 : 1)\n              : (resize.end.x - resize.start.x) *\n                (resize.resizeBar.position === \"left\" ? -1 : 1)),\n          resize.resizeBar.minSize ?? -Infinity,\n          resize.resizeBar.maxSize ?? Infinity,\n        ),\n      },\n    ),\n  };\n};\n\nexport const minimizeTemplateSizes = (\n  resizedTemplateSizes: GridTemplates,\n  resizeBars: ResizeBar[],\n  areaNames: string[][],\n  direction: \"row\" | \"column\",\n) => {\n  const capitalizedDirection = direction === \"row\" ? \"Rows\" : \"Columns\";\n  const key = `gridTemplate${capitalizedDirection}` as keyof GridTemplates;\n  return {\n    ...resizedTemplateSizes,\n    [key]: resizedTemplateSizes[key].map((templateSize, idx) => {\n      const templateSizeMinimized = resizedTemplateSizes.minimizedAreas.filter(\n        (ma) =>\n          resizeBars.find(\n            (rb) =>\n              rb.areaName === ma.area &&\n              (direction === \"row\"\n                ? rb.position === \"bottom\" || rb.position === \"top\"\n                : rb.position === \"right\" || rb.position === \"left\"),\n          ),\n      );\n      const minimizedArea = areaNames[idx].map((area) =>\n        templateSizeMinimized.find((ma) => ma.area === area),\n      )[0];\n\n      return minimizedArea?.size ?? templateSize;\n    }),\n  };\n};\n\nexport const calculateAdjacentAreas = (\n  areaNames: string[][],\n): AdjacentAreaPair[] => {\n  const adjacentAreaPairs: AdjacentAreaPair[] = [];\n  for (let y = 0; y < areaNames.length; y++) {\n    for (let x = 0; x < areaNames[y].length; x++) {\n      if (\n        x + 1 < areaNames[y].length &&\n        areaNames[y][x] !== areaNames[y][x + 1]\n      ) {\n        adjacentAreaPairs.push({\n          to: areaNames[y][x + 1],\n          from: areaNames[y][x],\n          row: {\n            start: y,\n            end: y,\n          },\n          column: {\n            start: x,\n            end: x + 1,\n          },\n        });\n      }\n\n      if (y + 1 < areaNames.length && areaNames[y][x] !== areaNames[y + 1][x]) {\n        adjacentAreaPairs.push({\n          to: areaNames[y + 1][x],\n          from: areaNames[y][x],\n          row: {\n            start: y,\n            end: y + 1,\n          },\n          column: {\n            start: x,\n            end: x,\n          },\n        });\n      }\n    }\n  }\n  return adjacentAreaPairs;\n};\n\nexport const combineAdjacentAreas = (\n  adjacentAreaPairs: AdjacentAreaPair[],\n): AdjacentAreaPair[] =>\n  Object.values(\n    adjacentAreaPairs.reduce((acc, value) => {\n      const currentFrom = acc[value.from] ?? {};\n      const currentTo = currentFrom[value.to] ?? value;\n      return {\n        ...acc,\n        [value.from]: {\n          ...currentFrom,\n          [value.to]: {\n            ...currentTo,\n            row: {\n              start: Math.min(currentTo.row.start, value.row.start),\n              end: Math.max(currentTo.row.end, value.row.end),\n            },\n            column: {\n              start: Math.min(currentTo.column.start, value.column.start),\n              end: Math.max(currentTo.column.end, value.column.end),\n            },\n          },\n        },\n      };\n    }, {} as Record<string, Record<string, AdjacentAreaPair>>),\n  ).flatMap((o) => Object.values(o));\n"]}